{
  "openapi": "3.0.3",
  "info": {
    "title": "Repos API",
    "version": "1.0.0",
    "contact": {
      "name": "Docker Hub",
      "url": "https://github.com/docker",
      "email": "hub@docker.com"
    }
  },
  "tags": [
    {
      "name": "repositories",
      "x-displayName": "Repositories",
      "description": "Endpoints for managing repositories\n"
    },
    {
      "name": "repositories-stars",
      "x-displayName": "Repository stars",
      "description": "Endpoints for managing repository stars\n"
    },
    {
      "name": "repositories-groups",
      "x-displayName": "Repository groups",
      "description": "Endpoints for managing repository permissions for organization groups\n"
    },
    {
      "name": "repositories-webhooks",
      "x-displayName": "Repository webhooks",
      "description": "Endpoints for managing repository webhooks\n"
    },
    {
      "name": "registry-settings",
      "x-displayName": "Registry settings",
      "description": "Endpoints for managing org and user registry settings\n"
    },
    {
      "name": "repositories-advanced-images",
      "x-displayName": "Advanced Image Management",
      "description": "The Advanced Image Management API endpoints allow you to manage Docker\nimages across all repositories.\n\nFor more information, see [Advanced Image Management dashboard](/docker-hub/image-management/).\n"
    },
    {
      "name": "repositories-autobuilds",
      "x-displayName": "Repository auto-builds",
      "description": "Endpoints for managing repository auto-builds\n"
    }
  ],
  "paths": {
    "/v2/namespaces/{namespace}/repositories": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespace"
        }
      ],
      "post": {
        "summary": "Creates a new repository",
        "description": "Creates a new repository in the provided namespace.\n\n The repository can be public or private. PAT scope: `repo:admin`\n\nLegacy endpoint: `/v2/repositories/`\n",
        "operationId": "create-repository",
        "tags": ["repositories"],
        "requestBody": {
          "$ref": "#/components/requestBodies/create_repository"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/create_repository"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "get": {
        "summary": "Lists repositories under namespace",
        "description": "List all repositories under the provided namespace. If authenticated, the response will include private repositories.\n\nPAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/`\n",
        "operationId": "list-repositories",
        "tags": ["repositories"],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Optionally search by repository name. If not provided, all repositories will be returned.",
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "string",
              "enum": [
                "last_updated",
                "-last_updated",
                "name",
                "-name",
                "pull_count",
                "-pull_count"
              ],
              "description": "Sort the results by field\n  * `last_updated` - latest updated repositories first\n  * `-last_updated` - latest updated repositories last\n  * `name` - alphabetical by repository name\n  * `-name` - reverse alphabetical by repository name\n  * `pull_count` - repositories with highest pull count first\n  * `-pull_count` - repositories with lowest pull count first\n"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "media_types",
            "schema": {
              "type": "string"
            },
            "description": "Comma-delimited list of media types. Optionally filter repositories by media types. Only repositories containing one or more artifacts with one of these media types will be returned.\n`null` should be added to the list to get repositories with image artifacts to handle legacy repositories.\n",
            "required": false
          },
          {
            "in": "query",
            "name": "content_types",
            "schema": {
              "type": "string"
            },
            "description": "Comma-delimited list of content types.\nOptionally filter repositories by content types. Only repositories containing one or more artifacts with one of these content types will be returned.\n",
            "required": false
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/page_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_repositories"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/v2/namespaces/{namespace}/repositories/{repository}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespace"
        },
        {
          "$ref": "#/components/parameters/repository"
        }
      ],
      "get": {
        "summary": "Gets repository info",
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/`\n",
        "operationId": "get-repository-info",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_repository"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "head": {
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/`\n",
        "summary": "Check repository",
        "operationId": "check-repository",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "description": "Repository exists"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "patch": {
        "summary": "Updates repository info",
        "description": "PAT scope: `repo:admin`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/`\n\nUpdates a repository info\n",
        "operationId": "update-repository-info",
        "tags": ["repositories"],
        "requestBody": {
          "$ref": "#/components/requestBodies/update_repository"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/update_repository"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/v2/namespaces/{namespace}/repositories/{repository}/dockerfile": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespace"
        },
        {
          "$ref": "#/components/parameters/repository"
        }
      ],
      "get": {
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/dockerfile/`\n",
        "summary": "Gets dockerfile for repository",
        "operationId": "get-repository-dockerfile",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_repository_dockerfile"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "put": {
        "summary": "Sets Dockerfile for repository",
        "operationId": "set-repository-dockerfile",
        "tags": ["repositories"],
        "description": "PAT scope: `repo:admin`\nM2M: true\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/set_dockerfile"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_repository_dockerfile"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/v2/namespaces/{namespace}/repositories/{repository}/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespace"
        },
        {
          "$ref": "#/components/parameters/repository"
        }
      ],
      "get": {
        "description": "List all tags for a repository. If the repository is private, the call must be authenticated. PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/tags`\n",
        "summary": "List repository tags",
        "operationId": "list-repository-tags",
        "tags": ["repositories"],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/architecture"
          },
          {
            "$ref": "#/components/parameters/os"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_tags"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "head": {
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/tags`\n",
        "summary": "Check repository tags",
        "operationId": "check-repository-tags",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "description": "Repository contains tags"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/namespace"
        },
        {
          "$ref": "#/components/parameters/repository"
        },
        {
          "$ref": "#/components/parameters/tag"
        }
      ],
      "get": {
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/tags/{tag}`\n",
        "summary": "Read repository tag",
        "operationId": "read-repository-tag",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_tag"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      },
      "head": {
        "description": "PAT scope: `repo:public_read`\n\nLegacy endpoint: `/v2/repositories/{namespace}/{repository}/tags/{tag}`\n",
        "summary": "Check repository tag",
        "operationId": "check-repository-tag",
        "tags": ["repositories"],
        "responses": {
          "200": {
            "description": "Repository tag exists"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "create_repository": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The repository name. Must contain a combination of alphanumeric characters and may contain the special characters ., _, or -. Letters must be lowercase."
          },
          "description": {
            "type": "string",
            "description": "A short description to identify your repository. If the repository is public, this description is used to index your content on Docker Hub and in search engines, and is visible to users in search results."
          },
          "full_description": {
            "type": "string",
            "description": "detailed description",
            "maxLength": 25000
          },
          "registry": {
            "type": "string",
            "description": "registry address"
          },
          "is_private": {
            "type": "boolean",
            "description": "Repository access. If true, the repository is private and does not appear in search results. If false, the repository is public and appears in search results."
          }
        }
      },
      "update_repository": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A short description to identify your repository. If the repository is public, this description is used to index your content on Docker Hub and in search engines, and is visible to users in search results.",
            "nullable": true
          },
          "full_description": {
            "type": "string",
            "nullable": true,
            "maxLength": 25000
          },
          "status": {
            "type": "integer",
            "enum": [6],
            "description": "Status of the repository:\n  * `1` - Active\n  * `6` - Archived\n"
          }
        }
      },
      "moderate_repository": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for the moderation action. ",
            "enum": ["spam", "support", "user"]
          }
        }
      },
      "unmoderate_repository": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for the moderation action. ",
            "enum": ["not_spam", "support"]
          }
        }
      },
      "repository_status": {
        "type": "integer",
        "enum": [0, 1, 2, 3, 4, 5, 6],
        "description": "Status of the repository:\n  * `0` - Initialized\n  * `1` - Active\n  * `2` - Pending Delete\n  * `3` - Locked\n  * `4` - Moderated\n  * `5` - Plan Exceeded\n  * `6` - Archived\n"
      },
      "set_privacy": {
        "type": "object",
        "properties": {
          "is_private": {
            "type": "boolean",
            "description": "Repository access. If true, the repository is private and does not appear in search results. If false, the repository is public and appears in search results."
          }
        }
      },
      "paginated_repositories": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository"
                }
              }
            }
          }
        ]
      },
      "get_namespace_storage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "total_storage_size": {
                "type": "integer"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository_storage"
                }
              }
            }
          }
        ]
      },
      "paginated_repository_names": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "repository name"
                    },
                    "namespace": {
                      "type": "string",
                      "description": "repository namespace"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "repository": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The repository name."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace of the repository."
          },
          "repository_type": {
            "type": "integer",
            "nullable": true,
            "enum": [0, 1],
            "description": "The type of the repository:\n  * `0` - Image\n  * `1` - Docker Engine Plugin\n"
          },
          "is_private": {
            "type": "boolean",
            "description": "Repository access. If true, the repository is private and does not appear in search results. If false, the repository is public and appears in search results."
          },
          "status": {
            "type": "object",
            "$ref": "#/components/schemas/repository_status"
          },
          "status_description": {
            "type": "string",
            "enum": [
              "initialized",
              "active",
              "pending_delete",
              "locked",
              "moderated_by_admin",
              "plan_exceeded"
            ],
            "description": "A human readable version of repository `status`"
          },
          "description": {
            "type": "string",
            "description": "A short description identifying the repository. If the repository is public, this description is used to index your content on Docker Hub and in search engines, and is visible to users in search results."
          },
          "star_count": {
            "type": "integer",
            "description": "The number of times the repository has been starred."
          },
          "pull_count": {
            "type": "integer",
            "description": "The number of times the repository has been pulled."
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "The date and time the repository was last updated.",
            "nullable": true
          },
          "date_registered": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "The date and time the repository was registered."
          },
          "affiliation": {
            "type": "string",
            "enum": ["", "owner", "editor", "member", "collaborator"],
            "description": "How the user is affiliated with the repository:\n  * null - user is unaffiliated\n  * `owner` - user is an owner of the repository\n  * `editor` - user is an editor of the repository\n  * `member` - user is a member of an organization group with access to the repository\n  * `collaborator` - user is a collaborator for the repository\n",
            "nullable": true
          },
          "media_types": {
            "description": "List of media types of artifacts tagged under the repository.\n`null` is a special case for legacy repositories that were created before this was implemented and should be intepretated as an image media type\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "content_types": {
            "description": "List of content types of artifacts tagged under the repository.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag_content_type"
            }
          }
        }
      },
      "repository_storage": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "repository name"
          },
          "namespace": {
            "type": "string",
            "description": "repository namespace"
          },
          "is_private": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of repository creation",
            "nullable": false
          },
          "last_pushed": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of repository last pull",
            "nullable": true
          },
          "last_pulled": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of repository last push",
            "nullable": true
          },
          "storage_size": {
            "type": "integer",
            "description": "repository storage size"
          },
          "content_types": {
            "description": "List of content types of artifacts tagged under the repository.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag_content_type"
            }
          }
        }
      },
      "paginated_starred_repositories": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/starred_repository"
                }
              }
            }
          }
        ]
      },
      "starred_repository": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user name"
          },
          "name": {
            "type": "string",
            "description": "repository name"
          },
          "namespace": {
            "type": "string",
            "description": "repository namespace"
          },
          "repository_type": {
            "type": "integer",
            "nullable": true,
            "enum": [0, 1],
            "description": "type of the repository:\n  * `0` - Image\n  * `1` - Docker Engine Plugin\n"
          },
          "status": {
            "type": "object",
            "$ref": "#/components/schemas/repository_status"
          },
          "status_description": {
            "type": "string",
            "enum": [
              "initialized",
              "active",
              "pending_delete",
              "locked",
              "moderated_by_admin",
              "plan_exceeded"
            ],
            "description": "human readable version of `status`"
          },
          "description": {
            "type": "string",
            "description": "repository description"
          },
          "is_private": {
            "type": "boolean"
          },
          "is_automated": {
            "type": "boolean",
            "description": "if repository is managed by autobuilds"
          },
          "star_count": {
            "type": "integer",
            "description": "number of times repository has been stared"
          },
          "pull_count": {
            "type": "integer",
            "description": "number of pulls from repository"
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last update",
            "nullable": true
          },
          "date_registered": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of repo registration"
          },
          "collaborator_count": {
            "type": "integer",
            "description": "number of repository collaborators. Only valid where repository_type = User"
          }
        }
      },
      "repository_star_usernames": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "number of usernames who starred the repository"
          },
          "list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of usernames"
          }
        }
      },
      "webhook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "webhook name"
          },
          "hook_url": {
            "type": "string",
            "description": "webhook URL"
          },
          "created": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of creation",
            "nullable": false
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last update",
            "nullable": false
          }
        }
      },
      "webhook_config": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "webhook name"
          },
          "hook_url": {
            "type": "string",
            "description": "webhook URL"
          }
        }
      },
      "create_repository_webhook_pipeline": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the pipeline"
          },
          "expect_final_callback": {
            "type": "boolean",
            "description": "send final callback"
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook_config"
            },
            "maxItems": 10
          }
        }
      },
      "repository_webhook_pipeline": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "webhook pipeline name"
          },
          "slug": {
            "type": "string",
            "description": "webhook slug name"
          },
          "created": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of creation",
            "nullable": false
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last update",
            "nullable": false
          },
          "expect_final_callback": {
            "type": "boolean"
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook"
            }
          }
        }
      },
      "paginated_repository_webhook_pipelines": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository_webhook_pipeline"
                }
              }
            }
          }
        ]
      },
      "repository_webhook_pipeline_request": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Hook request UUID"
          },
          "status": {
            "type": "string",
            "description": "hook request status"
          },
          "created": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of creation"
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last update"
          },
          "outgoing_request_url": {
            "type": "string",
            "description": "the URL where the hook request was sent to"
          },
          "outgoing_request_payload": {
            "type": "string",
            "description": "hook request payload"
          },
          "outgoing_response_body": {
            "type": "string",
            "description": "hook request response body"
          },
          "outgoing_response_status_code": {
            "type": "string",
            "description": "HTTP response code"
          }
        }
      },
      "paginated_repository_webhook_pipeline_history": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository_webhook_pipeline_request"
                }
              }
            }
          }
        ]
      },
      "repository_info": {
        "allOf": [
          {
            "$ref": "#/components/schemas/repository"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "type": "string",
                "description": "repository username"
              },
              "description": {
                "type": "string"
              },
              "is_automated": {
                "type": "boolean",
                "description": "if repository is managed by autobuilds"
              },
              "collaborator_count": {
                "type": "integer",
                "description": "number of repository collaborators. Only valid where repository_type = User"
              },
              "hub_user": {
                "type": "string",
                "description": "repository username on hub",
                "nullable": true
              },
              "has_starred": {
                "type": "boolean",
                "description": "if user has starred repository"
              },
              "full_description": {
                "type": "string",
                "description": "detailed description of repository",
                "nullable": true
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "read": {
                    "type": "boolean",
                    "description": "if user can read and pull from repository"
                  },
                  "write": {
                    "type": "boolean",
                    "description": "if user can update and push to repository"
                  },
                  "admin": {
                    "type": "boolean",
                    "description": "if user is an admin of repository"
                  }
                }
              }
            }
          }
        ]
      },
      "repository_dockerfile": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "string",
            "description": "dockerfile contents"
          }
        }
      },
      "repository_autobuild": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "integer",
            "description": "repository ID"
          },
          "build_name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "source_url": {
            "type": "string"
          },
          "docker_url": {
            "type": "string"
          },
          "repo_web_url": {
            "type": "string"
          },
          "repo_type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "repo_id": {
            "type": "string"
          },
          "hook_id": {
            "type": "integer",
            "nullable": true
          },
          "webhook_id": {
            "type": "string",
            "nullable": true
          },
          "build_tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "dockerfile_location": {
                  "type": "string"
                },
                "source_name": {
                  "type": "string"
                },
                "source_type": {
                  "type": "string"
                }
              }
            }
          },
          "deploykey": {
            "type": "object",
            "nullable": true,
            "properties": {
              "provider": {
                "type": "string"
              },
              "provider_key_id": {
                "type": "string"
              },
              "public_key": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "layer": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "description": "image layer digest",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "description": "size of the layer"
          },
          "instruction": {
            "type": "string",
            "description": "Dockerfile instruction"
          }
        }
      },
      "images": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/image"
        }
      },
      "image": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "description": "CPU architecture"
          },
          "features": {
            "type": "string",
            "description": "CPU features"
          },
          "variant": {
            "type": "string",
            "description": "CPU variant"
          },
          "digest": {
            "type": "string",
            "description": "image digest",
            "nullable": true
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/layer"
            }
          },
          "os": {
            "type": "string",
            "description": "operating system"
          },
          "os_features": {
            "type": "string",
            "description": "OS features"
          },
          "os_version": {
            "type": "string",
            "description": "OS version"
          },
          "size": {
            "type": "integer",
            "description": "size of the image"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "Status of the image"
          },
          "last_pulled": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last pull",
            "nullable": true
          },
          "last_pushed": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last push",
            "nullable": true
          }
        }
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tag"
        }
      },
      "tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "tag ID"
          },
          "images": {
            "type": "object",
            "$ref": "#/components/schemas/image"
          },
          "creator": {
            "type": "integer",
            "description": "ID of the user that pushed the tag"
          },
          "last_updated": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last update",
            "nullable": true
          },
          "last_updater": {
            "type": "integer",
            "description": "ID of the last user that updated the tag"
          },
          "last_updater_username": {
            "type": "string",
            "description": "Hub username of the user that updated the tag"
          },
          "name": {
            "type": "string",
            "description": "name of the tag"
          },
          "repository": {
            "type": "integer",
            "description": "repository ID"
          },
          "full_size": {
            "type": "integer",
            "description": "compressed size (sum of all layers) of the tagged image"
          },
          "v2": {
            "type": "string",
            "description": "repository API version"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "whether a tag has been pushed to or pulled in the past month"
          },
          "tag_last_pulled": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last pull",
            "nullable": true
          },
          "tag_last_pushed": {
            "type": "string",
            "example": "2021-01-05T21:06:53.506400Z",
            "description": "datetime of last push",
            "nullable": true
          },
          "media_type": {
            "description": "Media type of this tagged artifact\n",
            "type": "string"
          },
          "content_type": {
            "$ref": "#/components/schemas/tag_content_type"
          }
        }
      },
      "paginated_tags": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        ]
      },
      "add_repository_collaborator": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "Hub username of the collaborator"
          },
          "registry": {
            "type": "string",
            "description": "registry address"
          }
        }
      },
      "repository_colaborator": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "Hub username of the collaborator"
          }
        }
      },
      "paginated_collaborators": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository_colaborator"
                }
              }
            }
          }
        ]
      },
      "group_permission": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "string",
            "enum": ["read", "write", "admin"],
            "description": "permission level"
          }
        }
      },
      "id_group_permission": {
        "allOf": [
          {
            "$ref": "#/components/schemas/group_permission"
          },
          {
            "type": "object",
            "properties": {
              "group_id": {
                "type": "integer",
                "description": "organization group ID"
              }
            }
          }
        ]
      },
      "named_group_permission": {
        "allOf": [
          {
            "$ref": "#/components/schemas/id_group_permission"
          },
          {
            "type": "object",
            "properties": {
              "group_name": {
                "type": "string",
                "description": "organization group name"
              }
            }
          }
        ]
      },
      "paginated_groups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/named_group_permission"
                }
              }
            }
          }
        ]
      },
      "org_repo_groups": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/group_permission"
            },
            {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "string",
                  "description": "repository name"
                },
                "repository_type": {
                  "type": "string",
                  "description": "repository type"
                }
              }
            }
          ]
        }
      },
      "registry_settings": {
        "type": "object",
        "properties": {
          "private_repo_used": {
            "type": "integer",
            "description": "total number of private repositories already in use"
          },
          "num_free_private_repos": {
            "type": "integer",
            "deprecated": true
          },
          "private_repo_limit": {
            "type": "integer",
            "description": "maximum private repositories available in current hub plan"
          },
          "private_repo_available": {
            "type": "integer",
            "description": "total number of remaining private repositories"
          },
          "default_repo_visibility": {
            "type": "string",
            "description": "default visibility when creating new repository",
            "enum": ["private", "public"]
          },
          "collaborators_count": {
            "type": "integer",
            "description": "total number of collaborators"
          }
        }
      },
      "default_repo_visibility": {
        "type": "object",
        "properties": {
          "default_repo_visibility": {
            "type": "string",
            "description": "default visibility when creating new repository",
            "enum": ["private", "public"]
          }
        }
      },
      "repository_advanced_images_summary": {
        "type": "object",
        "properties": {
          "active_from": {
            "type": "string",
            "description": "Time from which an image must have been pushed or pulled to be counted as active.",
            "example": "2021-01-25T14:25:37.076343059Z"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "total": {
                "description": "Number of images in this repository.",
                "type": "integer",
                "example": 3
              },
              "active": {
                "description": "Number of images counted as active in this repository.",
                "type": "integer",
                "example": 2
              },
              "inactive": {
                "description": "Number of images counted as inactive in this repository.",
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "paginated_repository_advanced_images": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/repository_advanced_image"
                }
              }
            }
          }
        ]
      },
      "paginated_repository_advanced_images_tags": {
        "allOf": [
          {
            "$ref": "#/components/schemas/page"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/current_tag"
                }
              }
            }
          }
        ]
      },
      "repository_advanced_image": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/current_tag"
            }
          },
          "last_pushed": {
            "type": "string",
            "example": "2021-02-24T22:05:27.526308Z",
            "nullable": true
          },
          "last_pulled": {
            "type": "string",
            "example": "2021-02-24T23:16:10.200008Z",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "The status of the image based on its last activity against the `active_from` time.\n"
          }
        }
      },
      "current_tag": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Name of the tag.",
            "example": "latest"
          },
          "is_current": {
            "type": "boolean",
            "description": "`true` if the tag currently points to this image.\n\n`false` if it has been overwritten to point at a different image.\n"
          }
        }
      },
      "advanced_images_bulk_delete_request": {
        "type": "object",
        "properties": {
          "dry_run": {
            "type": "boolean",
            "description": "If `true` then will check and return errors and unignored warnings\nfor the deletion request but will not delete any images.\n"
          },
          "active_from": {
            "type": "string",
            "example": "2020-12-01T12:00:00Z",
            "description": "Sets the time from which an image must have been pushed or pulled to be counted as active.\n\nDefaults to 1 month before the current time.\n"
          },
          "manifests": {
            "description": "Image manifests to delete.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "string",
                  "description": "Name fo the repository to delete the image from.",
                  "example": "myrepo"
                },
                "digest": {
                  "type": "string",
                  "description": "Digest of the image to delete.",
                  "example": "sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr"
                }
              }
            }
          },
          "ignore_warnings": {
            "description": "Warnings to ignore. If a warning is not ignored then no deletions will happen and the\nwarning is returned in the response with HTTP status 400.\n\nThese warnings include:\n\n- is_active: warning when attempting to delete an image that is marked as active.\n- current_tag: warning when attempting to delete an image that has one or more current\ntags in the repository.\n\nWarnings can be copied from the response to the request.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/advanced_images_bulk_delete_warning"
            }
          }
        }
      },
      "advanced_images_bulk_delete_warning": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string",
            "description": "Name of the repository of the image this warning is for.",
            "example": "myrepo"
          },
          "digest": {
            "type": "string",
            "description": "Digest of the image this warning is for.",
            "example": "sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr"
          },
          "warning": {
            "type": "string",
            "enum": ["is_active", "current_tag"],
            "description": "Warning type.",
            "example": "current_tag"
          },
          "tags": {
            "description": "Image's current tags.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "latest"
            }
          }
        }
      },
      "advanced_images_bulk_delete_success": {
        "type": "object",
        "properties": {
          "dry_run": {
            "type": "boolean",
            "description": "Whether the request was a dry run or not."
          },
          "metrics": {
            "type": "object",
            "properties": {
              "manifest_deletes": {
                "type": "integer",
                "description": "Number of manifests deleted.",
                "example": 3
              },
              "manifest_errors": {
                "type": "integer",
                "description": "Number of manifests that failed to delete.",
                "example": 0
              },
              "tag_deletes": {
                "type": "integer",
                "description": "Number of tags deleted.",
                "example": 1
              },
              "tag_errors": {
                "type": "integer",
                "description": "Number of tags that failed to delete.",
                "example": 0
              }
            }
          }
        }
      },
      "advanced_images_bulk_delete_errors": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errinfo": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of error.",
                "example": "validation"
              },
              "details": {
                "type": "object",
                "properties": {
                  "warnings": {
                    "description": "Warnings that can be ignored.\n\nThese warnings include:\n\n- is_active: warning when attempting to delete an image that is marked as active.\n- current_tag: warning when attempting to delete an image that has one or more current tags in the repository.\n\nWarnings can be copied from the response to the request.\n",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/advanced_images_bulk_delete_warning"
                    }
                  },
                  "errors": {
                    "description": "Errors from validating delete request. These cannot be ignored.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "repository": {
                          "type": "string",
                          "description": "Name of the repository of the image this warning is for.",
                          "example": "myrepo"
                        },
                        "digest": {
                          "type": "string",
                          "description": "Digest of the image this warning is for.",
                          "example": "sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr"
                        },
                        "error": {
                          "type": "string",
                          "enum": [
                            "not_found",
                            "unauthorized",
                            "child_manifest"
                          ],
                          "description": "Error type."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "list_owned_namespaces": {
        "type": "object",
        "properties": {
          "namespaces": {
            "type": "array",
            "description": "List of owned namespaces",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "list_user_repositories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "set_dockerfile": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "string"
          }
        }
      },
      "page": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "total number of results available across all pages"
          },
          "next": {
            "type": "string",
            "description": "link to next page of results if any",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "description": "link to previous page of results  if any",
            "nullable": true
          }
        }
      },
      "error": {
        "type": "object",
        "properties": {
          "errinfo": {
            "type": "object",
            "items": {
              "type": "string"
            }
          },
          "detail": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "stars_count": {
        "type": "integer"
      },
      "create_accounts_profile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "tag_content_type": {
        "type": "string",
        "enum": ["image", "plugin", "helm", "volume", "wasm", "unrecognized"],
        "description": "Content type of a tagged artifact based on it's media type. `unrecognized` means the media type is unrecognized by Docker Hub."
      },
      "internal_update_repository": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "full_description": {
            "type": "string",
            "nullable": true,
            "maxLength": 25000
          },
          "status": {
            "type": "object",
            "$ref": "#/components/schemas/repository_status"
          }
        }
      },
      "bulk_update_repository": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/internal_update_repository"
        }
      }
    },
    "parameters": {
      "namespace": {
        "in": "path",
        "name": "namespace",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "repository": {
        "in": "path",
        "name": "repository",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "tag": {
        "in": "path",
        "name": "tag",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "digest": {
        "in": "path",
        "name": "digest",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "username": {
        "in": "path",
        "name": "username",
        "schema": {
          "type": "string"
        }
      },
      "orgname": {
        "in": "path",
        "name": "orgname",
        "schema": {
          "type": "string"
        }
      },
      "collaborator": {
        "in": "path",
        "name": "collaborator",
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "Page number to get. Defaults to 1."
      },
      "page_size": {
        "in": "query",
        "name": "page_size",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "Number of items to get per page. Defaults to 10. Max of 100."
      },
      "architecture": {
        "in": "query",
        "name": "architecture",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter to only items containing images supporting this architecture.",
        "example": "amd64"
      },
      "os": {
        "in": "query",
        "name": "os",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Filter to only items containing images supporting this operating system.",
        "example": "linux"
      }
    },
    "responses": {
      "create_repository": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/repository_info"
            }
          }
        }
      },
      "update_repository": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/repository_info"
            }
          }
        }
      },
      "list_repositories": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paginated_repositories"
            }
          }
        }
      },
      "get_repository": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/repository_info"
            }
          }
        }
      },
      "get_repository_dockerfile": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/repository_dockerfile"
            }
          }
        }
      },
      "list_tags": {
        "description": "list repository tags",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paginated_tags"
            }
          }
        }
      },
      "get_tag": {
        "description": "repository tag",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tag"
            }
          }
        }
      },
      "list_owned_namespaces": {
        "description": "deprecated: list of user's namespaces",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/list_owned_namespaces"
            }
          }
        }
      },
      "list_repository_names": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paginated_repository_names"
            }
          }
        }
      },
      "list_user_repositories": {
        "description": "deprecated: list of user's repositories",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/list_user_repositories"
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "not_found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "stars_count": {
        "description": "Stars count",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/stars_count"
            }
          }
        }
      },
      "bad_request": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      }
    },
    "requestBodies": {
      "create_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/create_repository"
            }
          }
        }
      },
      "update_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/update_repository"
            }
          }
        }
      },
      "moderate_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/moderate_repository"
            }
          }
        }
      },
      "unmoderate_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/unmoderate_repository"
            }
          }
        }
      },
      "set_privacy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/set_privacy"
            }
          }
        }
      },
      "add_repository_collaborator": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/add_repository_collaborator"
            }
          }
        }
      },
      "create_group": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/id_group_permission"
            }
          }
        }
      },
      "update_group": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/group_permission"
            }
          }
        }
      },
      "create_repository_webhook_pipeline": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/create_repository_webhook_pipeline"
            }
          }
        }
      },
      "default_repo_visibility": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/default_repo_visibility"
            }
          }
        }
      },
      "advanced_images_bulk_delete": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/advanced_images_bulk_delete_request"
            }
          }
        }
      },
      "set_dockerfile": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/set_dockerfile"
            }
          }
        }
      },
      "internal_update_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/internal_update_repository"
            }
          }
        }
      },
      "bulk_update_repository": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bulk_update_repository"
            }
          }
        }
      },
      "create_accounts_profile": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/create_accounts_profile"
            }
          }
        }
      }
    }
  }
}
